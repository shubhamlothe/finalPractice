Puzzles:
1. A man fell in a 50m deep well. He climbs 4 meters up and slips 3 meters down in one
day. How many days would it take for him to come out of the well?
ans: 4 meter per day -1 meter slip=3 meter per day
	50/3=16.66 days = 16 days 16 hr 24 min

2. A man works on the 10-th floor and takes the elevator down to ground level at the end
of the day. Yet every morning, he only takes the elevator to the 7th floor, even when
in a hurry. But he goes all the way to the 10-th floor when others are in the elevator
with him or it is a rainy day. Why?
ans: he is too short to press button 10. if others are with him he asks them to press the button
	or in rainy days he had umrella with that he press the button.

Difficult Question:

Que 1:Given a N x N matrix M. Write a program to find the count of all the
distinct elements common to all rows of the matrix. Print count of such
elements.
import java.util.*;

public class Main1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the size : ");
		int size = sc.nextInt();
		
		ArrayList<Integer> M[] = new ArrayList[size];
		
		for(int i=0; i<size; i++) {
			M[i] = new ArrayList();
		}
		
		for(int i=0; i<size; i++) {
			for(int j=0; j<size; j++) {
				System.out.println("Enter element : "+(i+1)+(j+1)+" : ");
				M[i].add(sc.nextInt());
			}
		}
		
		HashSet<Integer> h = new HashSet<Integer>(M[0]);
		
		for(int i=1; i<size; i++) {
			h.retainAll(M[i]);
		}
		
	
		
		System.out.println(h.size());
		System.out.println(h);
		
	}

}



















Que 2:Given two linked lists, your task is to complete the function makeUnion(),
that returns the union of two linked lists. This union should include all the
distinct elements only.

class LinkedList { 
    Node head; 
  
    
    class Node { 
        int data; 
        Node next; 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
   
    void getUnion(Node head1, Node head2) 
    { 
        Node t1 = head1, t2 = head2; 
  
      
        while (t1 != null) { 
            push(t1.data); 
            t1 = t1.next; 
        } 
  
        while (t2 != null) { 
            if (!isPresent(head, t2.data)) 
                push(t2.data); 
            t2 = t2.next; 
        } 
    } 
  
    void printList() 
    { 
        Node temp = head; 
        while (temp != null) { 
            System.out.print(temp.data + " "); 
            temp = temp.next; 
        } 
        System.out.println(); 
    } 
  
    void push(int new_data) 
    { 
       
        Node new_node = new Node(new_data); 
  
        new_node.next = head; 
  
        head = new_node; 
    } 
  
    boolean isPresent(Node head, int data) 
    { 
        Node t = head; 
        while (t != null) { 
            if (t.data == data) 
                return true; 
            t = t.next; 
        } 
        return false; 
    } 
  
    public static void main(String args[]) 
    { 
        LinkedList llist1 = new LinkedList(); 
        LinkedList llist2 = new LinkedList(); 
        LinkedList unin = new LinkedList(); 
        LinkedList intersecn = new LinkedList(); 
  
        llist1.push(20); 
        llist1.push(4); 
        llist1.push(15); 
        llist1.push(10); 

        llist2.push(10); 
        llist2.push(2); 
        llist2.push(4); 
        llist2.push(8); 
  
         
        unin.getUnion(llist1.head, llist2.head); 
  
        System.out.println("First List is"); 
        llist1.printList(); 
  
        System.out.println("Second List is"); 
        llist2.printList(); 
  
       
  
        System.out.println("Union List is"); 
        unin.printList(); 
    } 
} 
Output:
 First list is
10 15 4 20
 Second list is
8 4 2 10
 
 Union list is
2 8 20 4 15 10

Que 3: Given a set of N nuts of different sizes and N bolts of different sizes. There
is a one-one mapping between nuts and bolts. Match nuts and bolts
efficiently.
Comparison of a nut to another nut or a bolt to another bolt is not
allowed. It means nut can only be compared with bolt and bolt can only
be compared with nut to see which one is bigger/smaller.
The elements should follow the following order ! # $ % & * @ ^ ~ .


void printArray(char arr[]) 
{ 
    for(int i = 0; i < 6; i++) 
    { 
        printf("%c ", arr[i]); 
    } 
    printf("\n"); 
} 
   
int partition(char arr[], int low,  
              int high, char pivot) 
{ 
    int i = low; 
    char temp1, temp2; 
      
    for(int j = low; j < high; j++) 
    { 
        if (arr[j] < pivot) 
        { 
            temp1 = arr[i]; 
            arr[i] = arr[j]; 
            arr[j] = temp1; 
            i++; 
        }  
        else if(arr[j] == pivot) 
        { 
            temp1 = arr[j]; 
            arr[j] = arr[high]; 
            arr[high] = temp1; 
            j--; 
        } 
    }  
    temp2 = arr[i]; 
    arr[i] = arr[high]; 
    arr[high] = temp2; 
  
    return i; 
} 
  
void matchPairs(char nuts[], char bolts[], 
                int low, int high) 
{ 
    if (low < high) 
    { 
          
        
        int pivot = partition(nuts, low,  
                              high, bolts[high]); 
  
        partition(bolts, low, high, nuts[pivot]); 
  
        matchPairs(nuts, bolts, low, pivot - 1); 
        matchPairs(nuts, bolts, pivot + 1, high); 
    } 
} 
  

int main() 
{ 
      
   
    char nuts[] = {'@', '#', '$', '%', '^', '&'}; 
    char bolts[] = {'$', '%', '&', '^', '@', '#'}; 
  
    
    matchPairs(nuts, bolts, 0, 5); 
  
    printf("Matched nuts and bolts are : \n"); 
      
    printArray(nuts); 
    printArray(bolts); 
} 
  

Matched nuts and bolts are : 
# $ % & @ ^ 
# $ % & @ ^ 